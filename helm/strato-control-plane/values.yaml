# Default values for strato-control-plane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: strato-control-plane
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: strato.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: strato-tls
  #    hosts:
  #      - strato.local

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Health check probes configuration
livenessProbe:
  enabled: true
  path: /health/live
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /health/ready
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Strato Control Plane configuration
strato:
  logLevel: info
  
  database:
    host: ""  # Will be set from PostgreSQL subchart if enabled
    port: 5432
    name: vapor_database
    username: vapor_username
    # password is stored in secret
    
  webauthn:
    relyingPartyId: "localhost"
    relyingPartyName: "Strato"
    relyingPartyOrigin: "http://localhost:8080"

  # Step-CA certificate authority configuration
  stepCA:
    url: "https://step-ca:9000"
    fingerprint: ""  # Will be populated after CA initialization
    provisioner:
      name: "strato-agents"
      password: ""  # Will be stored in secret

  # External hostname for the control plane (used for WebSocket connections from agents)
  externalHostname: ""  # If empty, will use service name

# SpiceDB configuration
spicedb:
  enabled: true
  image:
    repository: authzed/spicedb
    tag: v1.35.3
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    grpcPort: 50051
    httpPort: 8080
    metricsPort: 9090
    
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
    
  # Pre-shared key for authentication - CHANGE THIS IN PRODUCTION!
  presharedKey: "strato-dev-key"
  
  # Network policies
  networkPolicy:
    enabled: false
    ingress: []
    egress: []
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  
  # Schema initialization
  schema:
    enabled: true
    # Schema content will be loaded from ConfigMap

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    database: vapor_database
    username: vapor_username
    password: vapor_password  # Change this in production!
    postgresPassword: postgres_password  # Change this in production!
    # Create the database if it doesn't exist
    createDatabase: true
  
  primary:
    persistence:
      enabled: true
      size: 20Gi
      
  metrics:
    enabled: false
    
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
    
# External PostgreSQL configuration (if postgresql.enabled is false)
externalDatabase:
  host: ""
  port: 5432
  database: vapor_database
  username: vapor_username
  password: ""  # Set this when using external database
  
# Migration job configuration
migration:
  enabled: true
  backoffLimit: 3
  
# Init containers
initContainers:
  waitForDB:
    enabled: true
    image: busybox:1.35

  waitForSpiceDB:
    enabled: true
    image: busybox:1.35

  waitForStepCA:
    enabled: true
    image: busybox:1.35

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policies for security
networkPolicy:
  enabled: false
  # Ingress rules - allow traffic from specific sources
  ingress:
    - from: []
      ports:
        - protocol: TCP
          port: 8080
  # Egress rules - allow traffic to specific destinations  
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 50051  # SpiceDB gRPC
        - protocol: TCP
          port: 8080   # SpiceDB HTTP
        - protocol: TCP
          port: 53     # DNS
        - protocol: UDP
          port: 53     # DNS

# Monitoring and observability
monitoring:
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
  
  # Prometheus metrics
  metrics:
    enabled: false
    port: 9090
    path: /metrics

# Step-CA Certificate Authority configuration
stepCA:
  enabled: true

  image:
    repository: smallstep/step-ca
    tag: latest
    pullPolicy: IfNotPresent

  replicaCount: 1

  service:
    type: ClusterIP
    port: 9000
    targetPort: 9000

  # Persistence for CA data
  persistence:
    enabled: true
    size: 10Gi
    accessMode: ReadWriteOnce
    storageClass: ""

  # CA initialization configuration
  init:
    enabled: true
    name: "Strato CA"
    dnsNames: "step-ca,step-ca.default.svc.cluster.local"
    address: ":9000"
    provisioner: "strato-admin"
    # Passwords - CHANGE THESE IN PRODUCTION!
    password: "strato-ca-password"
    provisionerPassword: "strato-dev-provisioner-key"

  # Provisioners configuration
  provisioners:
    agents:
      enabled: true
      name: "strato-agents"
      type: "JWK"
      claims:
        maxTLSCertDuration: "24h"
        defaultTLSCertDuration: "1h"

    mtls:
      enabled: true
      name: "mtls-renewal"
      type: "X5C"
      claims:
        maxTLSCertDuration: "24h"
        defaultTLSCertDuration: "1h"

    acme:
      enabled: true
      name: "acme"
      type: "ACME"

  # SPIFFE support
  spiffe:
    enabled: true
    trustDomain: "strato.local"
    templateFile: "/tmp/config/spiffe-template.json"

  # High availability database (optional - uses badger by default)
  database:
    enabled: false
    type: "postgresql"
    host: ""
    port: 5432
    name: "step_ca"
    username: "step_ca"
    password: ""
    sslMode: "require"

  # Security configuration
  security:
    # Enable admin API
    enableAdmin: true

    # TLS configuration
    tls:
      minVersion: "1.2"
      maxVersion: "1.3"
      cipherSuites:
        - "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
        - "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"

  # Resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Health checks
  livenessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  # Network policy
  networkPolicy:
    enabled: false
    ingress: []
    egress: []