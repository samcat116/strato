apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "strato-control-plane.fullname" . }}
  labels:
    {{- include "strato-control-plane.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "strato-control-plane.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "strato-control-plane.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "strato-control-plane.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.initContainers.waitForDB.enabled }}
        - name: wait-for-db
          image: alpine:3.17
          command: ['sh', '-c', 'apk add --no-cache netcat-openbsd && until nc -z {{ include "strato-control-plane.databaseHost" . }}.{{ .Release.Namespace }}.svc.cluster.local {{ .Values.strato.database.port }}; do echo waiting for database; sleep 2; done']
        {{- end }}
        {{- if and .Values.spicedb.enabled .Values.initContainers.waitForSpiceDB.enabled }}
        - name: wait-for-spicedb
          image: alpine:3.17
          command: ['sh', '-c', 'apk add --no-cache netcat-openbsd && until nc -z {{ include "strato-control-plane.fullname" . }}-spicedb.{{ .Release.Namespace }}.svc.cluster.local 8080; do echo waiting for SpiceDB; sleep 2; done']
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "./App"
            - "serve"
            - "--env"
            - "production"
            - "--hostname"
            - "0.0.0.0"
            - "--port"
            - "{{ .Values.service.port }}"
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: LOG_LEVEL
              value: "{{ .Values.strato.logLevel }}"
            - name: DATABASE_HOST
              value: "{{ include "strato-control-plane.databaseHost" . }}"
            - name: DATABASE_PORT
              value: "{{ .Values.strato.database.port }}"
            - name: DATABASE_NAME
              value: "{{ .Values.strato.database.name }}"
            - name: DATABASE_USERNAME
              value: "{{ .Values.strato.database.username }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "strato-control-plane.databaseSecretName" . }}"
                  key: "{{ include "strato-control-plane.databaseSecretKey" . }}"
            {{- if .Values.spicedb.enabled }}
            - name: SPICEDB_ENDPOINT
              value: "http://{{ include "strato-control-plane.fullname" . }}-spicedb:{{ .Values.spicedb.service.httpPort }}"
            - name: SPICEDB_PRESHARED_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ include "strato-control-plane.fullname" . }}-spicedb"
                  key: "preshared-key"
            {{- end }}
            - name: WEBAUTHN_RELYING_PARTY_ID
              value: "{{ include "strato-control-plane.webauthnRelyingPartyId" . }}"
            - name: WEBAUTHN_RELYING_PARTY_NAME
              value: "{{ .Values.strato.webauthn.relyingPartyName }}"
            - name: WEBAUTHN_RELYING_PARTY_ORIGIN
              value: "{{ include "strato-control-plane.webauthnOrigin" . }}"
            {{- if .Values.strato.externalHostname }}
            - name: EXTERNAL_HOSTNAME
              value: "{{ .Values.strato.externalHostname }}"
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/health/live" }}
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/health/ready" }}
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 5 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
