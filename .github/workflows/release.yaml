name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_CONTROL_PLANE: ${{ github.repository }}-control-plane
  IMAGE_NAME_AGENT: ${{ github.repository }}-agent

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog between tags
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Save to file for multiline output
          echo "$CHANGELOG" > changelog.txt
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Changes
          
          $CHANGELOG
          
          ## Docker Images
          
          - \`ghcr.io/${{ github.repository }}-control-plane:${GITHUB_REF#refs/tags/}\`
          - \`ghcr.io/${{ github.repository }}-agent:${GITHUB_REF#refs/tags/}\`
          
          ## Installation
          
          ### Using Docker Compose
          
          \`\`\`bash
          # Update your docker-compose.yml to use the new version
          docker compose pull
          docker compose up -d
          \`\`\`
          
          ### Manual Installation
          
          \`\`\`bash
          # Pull the images
          docker pull ghcr.io/${{ github.repository }}-control-plane:${GITHUB_REF#refs/tags/}
          docker pull ghcr.io/${{ github.repository }}-agent:${GITHUB_REF#refs/tags/}
          \`\`\`
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-push-images:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-latest-arm' || 'ubuntu-latest' }}
    needs: create-release
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for control plane image
        id: meta-control-plane
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CONTROL_PLANE }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Extract metadata for agent image
        id: meta-agent
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_AGENT }}
          tags: |
            type=ref,event=tag  
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push control plane image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./control-plane/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta-control-plane.outputs.tags }}
          labels: ${{ steps.meta-control-plane.outputs.labels }}
          cache-from: type=gha,key=control-plane-${{ matrix.platform }}
          cache-to: type=gha,mode=max,key=control-plane-${{ matrix.platform }}

      - name: Build and push agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./agent/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta-agent.outputs.tags }}
          labels: ${{ steps.meta-agent.outputs.labels }}
          cache-from: type=gha,key=agent-${{ matrix.platform }}
          cache-to: type=gha,mode=max,key=agent-${{ matrix.platform }}

  build-swift-binaries:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: strato-linux-x86_64
          - os: macos-latest
            asset_name: strato-macos-x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Swift (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.0'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev zlib1g-dev

      - name: Build Swift binaries
        run: |
          # Build control plane
          cd control-plane
          swift build -c release
          cd ..
          
          # Build agent
          cd agent
          swift build -c release
          cd ..

      - name: Package binaries
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp control-plane/.build/release/App release/strato-control-plane
            cp agent/.build/release/StratoAgent release/strato-agent
            tar czf ${{ matrix.asset_name }}.tar.gz -C release strato-control-plane strato-agent
          else
            cp control-plane/.build/release/App release/strato-control-plane
            cp agent/.build/release/StratoAgent release/strato-agent
            tar czf ${{ matrix.asset_name }}.tar.gz -C release strato-control-plane strato-agent
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  upload-source-assets:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create source archive
        run: |
          git archive --format=tar.gz --prefix=strato-${GITHUB_REF#refs/tags/v}/ HEAD > strato-${GITHUB_REF#refs/tags/v}-source.tar.gz
          git archive --format=zip --prefix=strato-${GITHUB_REF#refs/tags/v}/ HEAD > strato-${GITHUB_REF#refs/tags/v}-source.zip

      - name: Upload source tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./strato-${{ github.ref_name }}-source.tar.gz
          asset_name: strato-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Upload source zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./strato-${{ github.ref_name }}-source.zip
          asset_name: strato-${{ github.ref_name }}-source.zip
          asset_content_type: application/zip

      - name: Create docker-compose release file
        run: |
          cat > docker-compose.release.yml << 'EOF'
          version: '3.8'
          
          volumes:
            db_data:
            cloud_hypervisor_socket:
            vm_images:
          
          networks:
            strato-network:
              driver: bridge
          
          services:
            control-plane:
              image: ghcr.io/${{ github.repository }}-control-plane:${{ github.ref_name }}
              environment:
                DATABASE_HOST: db
                DATABASE_NAME: vapor_database
                DATABASE_USERNAME: vapor_username
                DATABASE_PASSWORD: vapor_password
                PERMIFY_ENDPOINT: http://permify:3476
                WEBAUTHN_RELYING_PARTY_ID: localhost
                WEBAUTHN_RELYING_PARTY_NAME: Strato
                WEBAUTHN_RELYING_PARTY_ORIGIN: http://localhost:8080
              depends_on:
                - db
                - permify
              ports:
                - "8080:8080"
              networks:
                - strato-network
              command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
          
            agent:
              image: ghcr.io/${{ github.repository }}-agent:${{ github.ref_name }}
              depends_on:
                - control-plane
              volumes:
                - cloud_hypervisor_socket:/var/run/cloud-hypervisor
                - vm_images:/images
              networks:
                - strato-network
              privileged: true
              command: ["--control-plane-url", "ws://control-plane:8080/agent/ws", "--hypervisor-socket", "/var/run/cloud-hypervisor/cloud-hypervisor.sock", "--log-level", "info"]
          
            migrate:
              image: ghcr.io/${{ github.repository }}-control-plane:${{ github.ref_name }}
              environment:
                DATABASE_HOST: db
                DATABASE_NAME: vapor_database
                DATABASE_USERNAME: vapor_username
                DATABASE_PASSWORD: vapor_password
                PERMIFY_ENDPOINT: http://permify:3476
              depends_on:
                - db
              networks:
                - strato-network
              command: ["migrate", "--yes"]
              deploy:
                replicas: 0
          
            db:
              image: postgres:16-alpine
              volumes:
                - db_data:/var/lib/postgresql/data/pgdata
              environment:
                POSTGRES_USER: vapor_username
                POSTGRES_PASSWORD: vapor_password
                POSTGRES_DB: vapor_database
                PGDATA: /var/lib/postgresql/data/strato
              ports:
                - "5432:5432"
              networks:
                - strato-network
          
            permify:
              image: ghcr.io/permify/permify:latest
              ports:
                - "3476:3476"
                - "3478:3478"
              command: ["serve", "--config=/config/config.yaml"]
              volumes:
                - ./permify:/config
              depends_on:
                - db
              environment:
                - PERMIFY_DATABASE_URI=postgres://vapor_username:vapor_password@db:5432/vapor_database?sslmode=disable
              networks:
                - strato-network
          EOF

      - name: Upload docker-compose release file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./docker-compose.release.yml
          asset_name: docker-compose.release.yml
          asset_content_type: text/yaml