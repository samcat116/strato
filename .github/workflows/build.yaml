name: Build and Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - develop

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: strato_test
          POSTGRES_USER: strato
          POSTGRES_PASSWORD: strato_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: "Install Swift toolchain"
        shell: bash
        run: |
          set -e

          export SWIFTLY_HOME_DIR=${{ github.workspace }}/.swiftly/share
          export SWIFTLY_BIN_DIR=${{ github.workspace }}/.swiftly/bin

          echo "$SWIFTLY_BIN_DIR" >> $GITHUB_PATH
          echo "SWIFTLY_HOME_DIR=$SWIFTLY_HOME_DIR" >> $GITHUB_ENV
          echo "SWIFTLY_BIN_DIR=$SWIFTLY_BIN_DIR" >> $GITHUB_ENV

          export PATH=$SWIFTLY_BIN_DIR:$PATH

          mkdir -p $SWIFTLY_HOME_DIR
          mkdir -p $SWIFTLY_BIN_DIR

          if [ "$(uname)" = "Linux" ]; then
            curl -O https://download.swift.org/swiftly/linux/swiftly-x86_64.tar.gz
            file swiftly-x86_64.tar.gz
            tar -xzf swiftly-x86_64.tar.gz -C $SWIFTLY_BIN_DIR
            rm swiftly-x86_64.tar.gz
          else
            # FIXME: https://github.com/swiftlang/swiftly/issues/271
            #    Why does this drop files in $HOME? That's not very CI-friendly
            curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
            installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
            cp ~/.swiftly/bin/swiftly $SWIFTLY_BIN_DIR
            rm swiftly.pkg
          fi

          swiftly init \
            --no-modify-profile \
            --quiet-shell-followup \
            --assume-yes \
            --skip-install \
            --verbose

          echo "swiftly version: $(swiftly --version)" >&2

          swiftly install --use main-snapshot-2025-04-12
          swiftly list

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev zlib1g-dev

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            control-plane/.build
            agent/.build
            shared/.build
          key: ${{ runner.os }}-swift-${{ hashFiles('control-plane/Package.resolved', 'agent/Package.resolved', 'shared/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'control-plane/package-lock.json'

      - name: Install JavaScript dependencies
        working-directory: control-plane
        run: npm ci

      - name: Run JavaScript linting
        working-directory: control-plane
        run: npm run lint

      - name: Build Control Plane
        working-directory: control-plane
        run: swift build

      - name: Build Agent
        working-directory: agent
        run: swift build

      - name: Build Shared Package
        working-directory: shared
        run: swift build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  build:
    name: Build Docker Images
    needs: [test]
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: x64
          - runner: ubuntu-24.04-arm
            arch: arm64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Control Plane Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./control-plane/Dockerfile
          push: false
          load: true
          platforms: ${{ matrix.arch == 'x64' && 'linux/amd64' || 'linux/arm64' }}
          tags: strato-control-plane:test
          cache-from: type=gha,key=control-plane-${{ matrix.arch }}
          cache-to: type=gha,mode=max,key=control-plane-${{ matrix.arch }}

      - name: Build Agent Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./agent/Dockerfile
          push: false
          platforms: ${{ matrix.arch == 'x64' && 'linux/amd64' || 'linux/arm64' }}
          tags: strato-agent:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,key=agent-${{ matrix.arch }}
          cache-to: type=gha,mode=max,key=agent-${{ matrix.arch }}

      - name: Test Docker Compose
        if: matrix.arch == 'x64'
        run: |
          # Create a test docker-compose file
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            db:
              image: postgres:16-alpine
              environment:
                POSTGRES_DB: vapor_database
                POSTGRES_USER: vapor_username
                POSTGRES_PASSWORD: vapor_password
                PGDATA: /var/lib/postgresql/data/strato
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U vapor_username"]
                interval: 10s
                timeout: 5s
                retries: 5

            permify:
              image: ghcr.io/permify/permify:latest
              command: ["serve", "--config=/config/config.yaml"]
              volumes:
                - ./permify:/config
              environment:
                - PERMIFY_DATABASE_URI=postgres://vapor_username:vapor_password@db:5432/vapor_database?sslmode=disable
              depends_on:
                db:
                  condition: service_healthy

            control-plane:
              image: strato-control-plane:test
              environment:
                DATABASE_HOST: db
                DATABASE_NAME: vapor_database
                DATABASE_USERNAME: vapor_username
                DATABASE_PASSWORD: vapor_password
                PERMIFY_ENDPOINT: http://permify:3476
                WEBAUTHN_RELYING_PARTY_ID: localhost
                WEBAUTHN_RELYING_PARTY_NAME: Strato
                WEBAUTHN_RELYING_PARTY_ORIGIN: http://localhost:8080
              depends_on:
                - db
                - permify
              command: ["sh", "-c", "sleep 10 && echo 'Control plane container started successfully'"]
          EOF

          # Test that the compose file works
          docker compose -f docker-compose.test.yml up --wait --timeout 120
          docker compose -f docker-compose.test.yml down
