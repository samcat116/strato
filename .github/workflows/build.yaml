name: Build and Test

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: strato_test
          POSTGRES_USER: strato
          POSTGRES_PASSWORD: strato_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev zlib1g-dev zstd

      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            control-plane/.build
            agent/.build
            shared/.build
          key: ${{ runner.os }}-swift-${{ hashFiles('control-plane/Package.resolved', 'agent/Package.resolved', 'shared/Package.resolved') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ hashFiles('control-plane/Package.resolved', 'agent/Package.resolved', 'shared/Package.resolved') }}-
            ${{ runner.os }}-swift-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "control-plane/package-lock.json"

      - name: Install JavaScript dependencies
        working-directory: control-plane
        run: npm ci

      - name: Run JavaScript linting
        working-directory: control-plane
        run: npm run lint

      - name: Build Control Plane
        working-directory: control-plane
        run: swift build --build-tests

      # - name: Build Agent
      #   working-directory: agent
      #   run: swift build --build-tests

      - name: Build Shared Package
        working-directory: shared
        run: swift build --build-tests

      - name: Test Control Plane
        working-directory: control-plane
        run: swift test --skip-build --parallel

      # - name: Test Shared Package
      #   working-directory: shared
      #   run: swift test --skip-build --parallel

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
  build-swift:
    name: Build Swift Release Binaries
    needs: [test]
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: x64
          - runner: ubuntu-24.04-arm
            arch: arm64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev zlib1g-dev zstd libjemalloc-dev

      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            control-plane/.build
            agent/.build
            shared/.build
          key: ${{ runner.os }}-${{ matrix.arch }}-swift-release-${{ hashFiles('control-plane/Package.resolved', 'agent/Package.resolved', 'shared/Package.resolved') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-swift-release-${{ hashFiles('control-plane/Package.resolved', 'agent/Package.resolved', 'shared/Package.resolved') }}-
            ${{ runner.os }}-${{ matrix.arch }}-swift-release-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "control-plane/package-lock.json"

      - name: Install JavaScript dependencies
        working-directory: control-plane
        run: npm ci

      - name: Build TailwindCSS for production
        working-directory: control-plane
        run: npm run build-css-prod

      - name: Build Control Plane Release Binary
        working-directory: control-plane
        run: |
          swift build -c release --product App -Xlinker -ljemalloc
          # Create artifact directory structure
          mkdir -p ../artifacts/control-plane/bin
          mkdir -p ../artifacts/control-plane/resources
          # Copy binary
          cp "$(swift build -c release --show-bin-path)/App" ../artifacts/control-plane/bin/
          # Copy swift-backtrace (try multiple possible locations)
          if [ -f "/usr/lib/swift/linux/swift-backtrace-static" ]; then
            cp "/usr/lib/swift/linux/swift-backtrace-static" ../artifacts/control-plane/bin/
          elif [ -f "/usr/libexec/swift/linux/swift-backtrace-static" ]; then
            cp "/usr/libexec/swift/linux/swift-backtrace-static" ../artifacts/control-plane/bin/
          else
            echo "Warning: swift-backtrace-static not found, skipping"
          fi
          # Copy resources
          find -L "$(swift build -c release --show-bin-path)/" -regex '.*\.resources$' -exec cp -Ra {} ../artifacts/control-plane/resources/ \; || true
          # Copy Public and Resources directories
          [ -d Public ] && cp -R Public ../artifacts/control-plane/ || true
          [ -d Resources ] && cp -R Resources ../artifacts/control-plane/ || true

      # - name: Build Agent Release Binary
      #   working-directory: agent
      #   run: |
      #     swift build -c release --product StratoAgent
      #     # Create artifact directory
      #     mkdir -p ../artifacts/agent/bin
      #     # Copy binary
      #     cp "$(swift build -c release --show-bin-path)/StratoAgent" ../artifacts/agent/bin/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swift-binaries-${{ matrix.arch }}
          path: artifacts/
          retention-days: 1

  build:
    name: Build Docker Images
    needs: [build-swift]
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: x64
          - runner: ubuntu-24.04-arm
            arch: arm64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: swift-binaries-${{ matrix.arch }}
          path: artifacts/
        continue-on-error: true

      - name: Prepare build context
        run: |
          # Create empty artifacts directory if it doesn't exist
          mkdir -p ./artifacts
          if [ -d "artifacts/control-plane" ]; then
            echo "Artifacts found, copying to build context"
            cp -R artifacts/* ./artifacts/
          else
            echo "No artifacts found, will build from source"
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Control Plane Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./control-plane/Dockerfile
          push: false
          load: true
          platforms: ${{ matrix.arch == 'x64' && 'linux/amd64' || 'linux/arm64' }}
          tags: strato-control-plane:test
          cache-from: type=gha,key=control-plane-${{ matrix.arch }}
          cache-to: type=gha,mode=max,key=control-plane-${{ matrix.arch }}
          build-args: |
            PREBUILT_ARTIFACTS=artifacts/control-plane

      # - name: Build Agent Docker Image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./agent/Dockerfile
      #     push: false
      #     platforms: ${{ matrix.arch == 'x64' && 'linux/amd64' || 'linux/arm64' }}
      #     tags: strato-agent:${{ github.sha }}-${{ matrix.arch }}
      #     cache-from: type=gha,key=agent-${{ matrix.arch }}
      #     cache-to: type=gha,mode=max,key=agent-${{ matrix.arch }}

      - name: Test Docker Compose
        if: matrix.arch == 'x64'
        run: |
          # Create a test docker-compose file
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            db:
              image: postgres:16-alpine
              environment:
                POSTGRES_DB: vapor_database
                POSTGRES_USER: vapor_username
                POSTGRES_PASSWORD: vapor_password
                PGDATA: /var/lib/postgresql/data/strato
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U vapor_username"]
                interval: 10s
                timeout: 5s
                retries: 5

            spicedb-migrate:
              image: authzed/spicedb:v1.35.3
              environment:
                SPICEDB_DATASTORE_ENGINE: postgres
                SPICEDB_DATASTORE_CONN_URI: "postgres://vapor_username:vapor_password@db:5432/vapor_database?sslmode=disable"
              command: ["migrate", "head"]
              depends_on:
                db:
                  condition: service_healthy

            spicedb:
              image: authzed/spicedb:v1.35.3
              environment:
                SPICEDB_GRPC_PRESHARED_KEY: "strato-dev-key"
                SPICEDB_DATASTORE_ENGINE: postgres
                SPICEDB_DATASTORE_CONN_URI: "postgres://vapor_username:vapor_password@db:5432/vapor_database?sslmode=disable"
                SPICEDB_HTTP_ENABLED: "true"
                SPICEDB_DISPATCH_UPSTREAM_ADDR: "spicedb:50051"
              command: ["serve"]
              healthcheck:
                test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
                interval: 5s
                timeout: 5s
                retries: 3
                start_period: 5s
              depends_on:
                spicedb-migrate:
                  condition: service_completed_successfully

            control-plane:
              image: strato-control-plane:test
              environment:
                DATABASE_HOST: db
                DATABASE_NAME: vapor_database
                DATABASE_USERNAME: vapor_username
                DATABASE_PASSWORD: vapor_password
                SPICEDB_ENDPOINT: http://spicedb:8080
                SPICEDB_PRESHARED_KEY: "strato-dev-key"
                WEBAUTHN_RELYING_PARTY_ID: localhost
                WEBAUTHN_RELYING_PARTY_NAME: Strato
                WEBAUTHN_RELYING_PARTY_ORIGIN: http://localhost:8080
              depends_on:
                - db
                - spicedb
              command: ["sh", "-c", "sleep 10 && echo 'Control plane container started successfully'"]
          EOF

          # Test that the compose file works
          docker compose -f docker-compose.test.yml up --wait --timeout 120
          docker compose -f docker-compose.test.yml down
